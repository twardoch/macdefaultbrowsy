# this_file: pyproject.toml
#==============================================================================
# MACDEFAULTBROWSY PACKAGE CONFIGURATION
# This pyproject.toml defines the package metadata, dependencies, build system,
# and development environment for the macdefaultbrowsy package.
#==============================================================================

#------------------------------------------------------------------------------
# BUILD SYSTEM CONFIGURATION
# Defines the tools required to build the package and the build backend.
#------------------------------------------------------------------------------
[build-system]
# Hatchling is a modern build backend for Python packaging
# hatch-vcs integrates with version control systems for versioning
requires = [
    "hatchling>=1.27.0",
    "hatch-vcs>=0.4.0",
]
build-backend = "hatchling.build"

#------------------------------------------------------------------------------
# PROJECT METADATA
# Core package information used by PyPI and package managers.
#------------------------------------------------------------------------------
[project]
name = "macdefaultbrowsy"
description = "A Python port of macdefaultbrowser to manage the default web browser on macOS."
readme = "README.md"
requires-python = ">=3.8"
keywords = ["macos", "browser", "default", "cli", "automation"]
dynamic = ["version"]  # Version set dynamically from git tags
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]

dependencies = [
    "pyobjc-framework-CoreServices",
    "fire",
    "loguru",
]

# Author information
[[project.authors]]
name = "Your Name"
email = "your.email@example.com"

# License information
[project.license]
text = "MIT"

# Project URLs
[project.urls]
Documentation = "https://github.com/twardoch/macdefaultbrowser#readme"
Issues = "https://github.com/twardoch/macdefaultbrowser/issues"
Source = "https://github.com/twardoch/macdefaultbrowser"

#------------------------------------------------------------------------------
# OPTIONAL DEPENDENCIES
# Additional dependencies for optional features, development, and testing.
#------------------------------------------------------------------------------
[project.optional-dependencies]

# Development tools
dev = [
    "pre-commit>=4.1.0",
    "ruff>=0.9.7",
    "mypy>=1.15.0",
    "pyupgrade>=3.19.1",
]

# Testing tools and frameworks
test = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "coverage[toml]>=7.6.12",
]

# All optional dependencies combined
all = ["dev", "test"]

#------------------------------------------------------------------------------
# COMMAND-LINE SCRIPTS
# Entry points for command-line executables installed with the package.
#------------------------------------------------------------------------------
[project.scripts]
macdefaultbrowsy = "macdefaultbrowsy.__main__:cli"

#------------------------------------------------------------------------------
# HATCH BUILD CONFIGURATION
# Configures the build process, specifying which packages to include and
# how to handle versioning.
#------------------------------------------------------------------------------
[tool.hatch.build]
# Include package data files
include = [
    "macdefaultbrowsy/py.typed",
]
exclude = ["**/__pycache__", "**/.pytest_cache", "**/.mypy_cache"]

[tool.hatch.build.targets.wheel]
packages = ["macdefaultbrowsy"]
reproducible = true

# Version control system hook configuration
# Automatically updates the version file from git tags
[tool.hatch.build.hooks.vcs]
version-file = "macdefaultbrowsy/__version__.py"

# Version source configuration
[tool.hatch.version]
source = "vcs"  # Get version from git tags
root = ".."  # Point to parent directory where git repo is

# Metadata handling configuration
[tool.hatch.metadata]
allow-direct-references = true

#------------------------------------------------------------------------------
# DEVELOPMENT ENVIRONMENTS
#------------------------------------------------------------------------------
[tool.hatch.envs.default]
features = ["dev", "test"]

# Commands available in the default environment
[tool.hatch.envs.default.scripts]
# Run tests with optional arguments
test = "pytest {args:tests}"
# Run tests with coverage reporting
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=macdefaultbrowsy --cov=tests {args:tests}"
# Run type checking
type-check = "mypy macdefaultbrowsy tests"
# Run linting and formatting
lint = ["ruff check macdefaultbrowsy tests", "ruff format macdefaultbrowsy tests"]
# Format and fix style issues
fmt = ["ruff format macdefaultbrowsy tests", "ruff check --fix macdefaultbrowsy tests"]
fix = ["ruff check --fix --unsafe-fixes macdefaultbrowsy tests", "ruff format macdefaultbrowsy tests"]

#------------------------------------------------------------------------------
# SPECIALIZED ENVIRONMENTS
# Additional environments for specific development tasks.
#------------------------------------------------------------------------------

# Dedicated environment for linting and code quality checks
[tool.hatch.envs.lint]
detached = true
features = ["dev"]

# Linting environment commands
[tool.hatch.envs.lint.scripts]
# Type checking with automatic type installation
typing = "mypy --install-types --non-interactive {args:macdefaultbrowsy tests}"
# Check style and format code
style = ["ruff check {args:.}", "ruff format {args:.}"]
# Format and fix style issues
fmt = ["ruff format {args:.}", "ruff check --fix {args:.}"]
fix = ["ruff check --fix --unsafe-fixes {args:.}", "ruff format {args:.}"]
# Run all ops
all = ["style", "typing", "fix"]

# Dedicated environment for testing
[tool.hatch.envs.test]
features = ["test"]

# Testing environment commands
[tool.hatch.envs.test.scripts]
# Run tests
test = "python -m pytest {args:tests}"
# Run tests with coverage
test-cov = "python -m pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=macdefaultbrowsy --cov=tests {args:tests}"

#------------------------------------------------------------------------------
# CODE QUALITY TOOLS
# Configuration for linting, formatting, and code quality enforcement.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# COVERAGE CONFIGURATION
# Settings for test coverage measurement and reporting.
#------------------------------------------------------------------------------

# Path mapping for coverage in different environments
[tool.coverage.paths]
macdefaultbrowsy = ["macdefaultbrowsy", "*/macdefaultbrowsy/macdefaultbrowsy"]
tests = ["tests", "*/macdefaultbrowsy/tests"]

# Coverage report configuration
[tool.coverage.report]
# Lines to exclude from coverage reporting
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "pass",
    "raise NotImplementedError",
    "raise ImportError",
    "except ImportError",
    "except KeyError",
    "except AttributeError",
    "except NotImplementedError",
]

[tool.coverage.run]
source_pkgs = ["macdefaultbrowsy", "tests"]
branch = true
parallel = true
omit = [
    "macdefaultbrowsy/__version__.py",
]

#------------------------------------------------------------------------------
# MYPY CONFIGURATION
# Configuration for type checking with mypy.
#------------------------------------------------------------------------------

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

#------------------------------------------------------------------------------
# PYTEST CONFIGURATION
# Configuration for pytest, including markers and options.
#------------------------------------------------------------------------------

[tool.pytest.ini_options]
addopts = "-v --durations=10"
console_output_style = "progress"
filterwarnings = ["ignore::DeprecationWarning", "ignore::UserWarning"]
log_cli = true
log_cli_level = "INFO"
markers = [
    "unit: mark a test as a unit test",
    "integration: mark a test as an integration test",
]
norecursedirs = [
    ".*",
    "build",
    "dist",
    "venv",
    "__pycache__",
    "*.egg-info",
]
python_classes = ["Test*"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
testpaths = ["tests"]

#------------------------------------------------------------------------------
# RUFF CONFIGURATION
# Configuration for Ruff, including linter and formatter settings.
#------------------------------------------------------------------------------

# Ruff linter and formatter configuration
[tool.ruff]
target-version = "py38"
line-length = 79

# Linting rules configuration
[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",  # Line too long (handled by formatter)
]
unfixable = [
    "F401",  # Don't automatically remove unused imports
]

# isort configuration within Ruff
[tool.ruff.lint.isort]
known-first-party = ["macdefaultbrowsy"]

# Per-file rule exceptions
[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "S101",  # Allow assertions in tests
]

#------------------------------------------------------------------------------
# SETUPTOOLS-SCM CONFIGURATION
# Configuration for setuptools-scm to work with git tags in parent directory
#------------------------------------------------------------------------------
[tool.setuptools_scm]
root = ".."
tag_regex = "^v(?P<version>.*)$" 