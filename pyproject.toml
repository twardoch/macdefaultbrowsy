[project]
name = "macdefaultbrowsy"
description = ""
readme = "README.md"
requires-python = ">=3.10"
keywords = [ ]
dynamic = [ "version" ]
classifiers = [
"Development Status :: 4 - Beta",
"Programming Language :: Python",
"Programming Language :: Python :: 3.10",
"Programming Language :: Python :: 3.11",
"Programming Language :: Python :: 3.12",
"Programming Language :: Python :: Implementation :: CPython",
"Programming Language :: Python :: Implementation :: PyPy",
"Operating System :: OS Independent",
"License :: OSI Approved :: MIT License",
"Intended Audience :: Developers"
]
dependencies = [ "pyobjc-framework-LaunchServices", "loguru", "fire" ]


[[project.authors]]
name = "Adam Twardoch"
email = "adam+github@twardoch.com"


[project.license]
text = "MIT"


[project.urls]
Documentation = "https://github.com/twardoch/macdefaultbrowsy#readme"
Issues = "https://github.com/twardoch/macdefaultbrowsy/issues"
Source = "https://github.com/twardoch/macdefaultbrowsy"


[project.optional-dependencies]
dev = [
"pre-commit> = 4.1.0",
"ruff> = 0.9.7",
"mypy> = 1.15.0",
"absolufy-imports> = 0.3.1",
"pyupgrade> = 3.19.1",
"isort> = 6.0.1"
]
test = [
"pytest> = 8.3.4",
"pytest-cov> = 6.0.0",
"pytest-xdist> = 3.6.1",
"pytest-benchmark[histogram]> = 5.1.0",
"pytest-asyncio> = 0.25.3",
"coverage[toml]> = 7.6.12"
]
docs = [
"sphinx> = 7.2.6",
"sphinx-rtd-theme> = 2.0.0",
"sphinx-autodoc-typehints> = 2.0.0",
"myst-parser> = 3.0.0"
]
all = [
"myst-parser> = 3.0.0",
"sphinx-autodoc-typehints> = 2.0.0",
"sphinx-rtd-theme> = 2.0.0",
"sphinx> = 7.2.6",
"absolufy-imports> = 0.3.1",
"coverage[toml]> = 7.6.12",
"fire",
"isort> = 6.0.1",
"loguru",
"mypy> = 1.15.0",
"pre-commit> = 4.1.0",
"pyobjc-framework-LaunchServices",
"pytest-asyncio> = 0.25.3",
"pytest-benchmark[histogram]> = 5.1.0",
"pytest-cov> = 6.0.0",
"pytest-xdist> = 3.6.1",
"pytest> = 8.3.4",
"pyupgrade> = 3.19.1",
"ruff> = 0.9.7"
]


[project.scripts]
macdefaultbrowsy = "macdefaultbrowsy.__main__:cli"


[build-system]
requires = [ "hatchling>=1.27.0", "hatch-vcs>=0.4.0" ]
build-backend = "hatchling.build"


[tool.hatch.build]
include = [
"src/macdefaultbrowsy/py.typed",
"src/macdefaultbrowsy/data/**/*"
]
exclude = [ "**/__pycache__", "**/.pytest_cache", "**/.mypy_cache" ]


[tool.hatch.build.targets.wheel]
packages = [ "src/macdefaultbrowsy" ]
reproducible = true


[tool.hatch.build.hooks.vcs]
version-file = "src/macdefaultbrowsy/__version__.py"


[tool.hatch.version]
source = "vcs"


[tool.hatch.metadata]
allow-direct-references = true


[tool.hatch.envs.default]
features = [ "dev", "test", "all" ]
dependencies = [ ]


[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/macdefaultbrowsy --cov=tests {args:tests}"
type-check = "mypy src/macdefaultbrowsy tests"
lint = [
"ruff check src/macdefaultbrowsy tests",
"ruff format --respect-gitignore src/macdefaultbrowsy tests"
]
fmt = [
"ruff format --respect-gitignore src/macdefaultbrowsy tests",
"ruff check --fix src/macdefaultbrowsy tests"
]
fix = [
"ruff check --fix --unsafe-fixes src/macdefaultbrowsy tests",
"ruff format --respect-gitignore src/macdefaultbrowsy tests"
]


[[tool.hatch.envs.all.matrix]]
python = [ "3.10", "3.11", "3.12" ]


[tool.hatch.envs.lint]
detached = true
features = [ "dev" ]


[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/macdefaultbrowsy tests}"
style = [
"ruff check {args:.}",
"ruff format --respect-gitignore {args:.}"
]
fmt = [
"ruff format --respect-gitignore {args:.}",
"ruff check --fix {args:.}"
]
fix = [
"ruff check --fix --unsafe-fixes {args:.}",
"ruff format --respect-gitignore {args:.}"
]
all = [ "style", "typing", "fix" ]


[tool.hatch.envs.test]
features = [ "test" ]


[tool.hatch.envs.test.scripts]
test = "python -m pytest -n auto {args:tests}"
test-cov = "python -m pytest -n auto --cov-report=term-missing --cov-config=pyproject.toml --cov=src/macdefaultbrowsy --cov=tests {args:tests}"
bench = "python -m pytest -v -p no:briefcase tests/test_benchmark.py --benchmark-only"
bench-save = "python -m pytest -v -p no:briefcase tests/test_benchmark.py --benchmark-only --benchmark-json=benchmark/results.json"


[tool.hatch.envs.docs]
features = [ "docs" ]


[tool.hatch.envs.docs.scripts]
build = "sphinx-build -b html docs/source docs/build"


[tool.hatch.envs.ci]
features = [ "test" ]


[tool.hatch.envs.ci.scripts]
test = "pytest --cov=src/macdefaultbrowsy --cov-report=xml"


[tool.coverage.paths]
macdefaultbrowsy = [
"src/macdefaultbrowsy",
"*/macdefaultbrowsy/src/macdefaultbrowsy"
]
tests = [ "tests", "*/macdefaultbrowsy/tests" ]


[tool.coverage.report]
exclude_lines = [
"no cov",
"if __name__ = = .__main__.:",
"if TYPE_CHECKING:",
"pass",
"raise NotImplementedError",
"raise ImportError",
"except ImportError",
"except KeyError",
"except AttributeError",
"except NotImplementedError"
]


[tool.coverage.run]
source_pkgs = [ "src/macdefaultbrowsy", "tests" ]
branch = true
parallel = true
omit = [ "src/macdefaultbrowsy/__about__.py" ]


[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true


[[tool.mypy.overrides]]
module = [ "tests.*" ]
disallow_untyped_defs = false
disallow_incomplete_defs = false


[tool.pytest.ini_options]
addopts = "-v --durations=10 -p no:briefcase"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
console_output_style = "progress"
filterwarnings = [ "ignore::DeprecationWarning", "ignore::UserWarning" ]
log_cli = true
log_cli_level = "INFO"
markers = [
"benchmark: marks tests as benchmarks (select with '-m benchmark')",
"unit: mark a test as a unit test",
"integration: mark a test as an integration test",
"permutation: tests for permutation functionality",
"parameter: tests for parameter parsing",
"prompt: tests for prompt parsing"
]
norecursedirs = [
".*",
"build",
"dist",
"venv",
"__pycache__",
"*.egg-info",
"_private"
]
python_classes = [ "Test*" ]
python_files = [ "test_*.py" ]
python_functions = [ "test_*" ]
testpaths = [ "tests" ]


[tool.pytest-benchmark]
min_rounds = 100
min_time = 0.1
histogram = true
storage = "file"
save-data = true
compare = [
"min",
"max",
"mean",
"stddev",
"median",
"iqr",
"ops",
"rounds"
]


[tool.ruff]
target-version = "py310"
line-length = 120


[tool.ruff.lint]
select = [
"A",
"ARG",
"ASYNC",
"B",
"C",
"DTZ",
"E",
"EM",
"F",
"FBT",
"I",
"ICN",
"ISC",
"LOG",
"N",
"PLC",
"PLE",
"PLR",
"PLW",
"PT",
"PTH",
"PYI",
"RET",
"RSE",
"RUF",
"S",
"SIM",
"T",
"TCH",
"TID",
"UP",
"W",
"YTT"
]
ignore = [
"B027",
"C901",
"FBT003",
"PLR0911",
"PLR0912",
"PLR0913",
"PLR0915",
"PLR1714",
"PLW0603",
"PT013",
"PTH123",
"PYI056",
"S105",
"S106",
"S107",
"S110",
"SIM102"
]
unfixable = [ "F401" ]
exclude = [ ".git", ".venv", "venv", "dist", "build" ]


[tool.ruff.lint.isort]
known-first-party = [ "macdefaultbrowsy" ]


[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"


[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [ "PLR2004", "S101", "TID252" ]
